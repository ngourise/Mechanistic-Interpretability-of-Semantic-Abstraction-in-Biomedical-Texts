# -*- coding: utf-8 -*-
#Original plotting file. Plotting has been incorporated into basicModel.py already.
"""similarityAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l_yLLtkdWQMrIRLxSaZf-vLZryP-1fnZ
"""

pip install sentence-transformers scikit-learn matplotlib seaborn transformers

import pandas as pd

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df_train = pd.read_csv('similarity_results _train.csv')
df_val = pd.read_csv('similarity_results_val.csv')
df_test = pd.read_csv('similarity_results_test.csv')
df = pd.concat([df_train, df_val, df_test], ignore_index=True)

df = df.dropna(subset=['avg_cosine_similarity', 'avg_l2_distance', 'avg_cka', 'cohen_d_neuronwise'], how='any')

df['avg_cosine_similarity'] = pd.to_numeric(df['avg_cosine_similarity'], errors='coerce')
df['avg_l2_distance'] = pd.to_numeric(df['avg_l2_distance'], errors='coerce')
df['avg_cka'] = pd.to_numeric(df['avg_cka'], errors='coerce')
df['attention_kl_divergence'] = pd.to_numeric(df['attention_kl_divergence'], errors='coerce')
df['cohen_d_neuronwise'] = pd.to_numeric(df['cohen_d_neuronwise'], errors='coerce')

sns.histplot(df['avg_cosine_similarity'], bins=50, kde=True)
plt.title('Distribution of Avg Cosine Similarity')
plt.xlabel('Avg Cosine Similarity')
plt.ylabel('Frequency')
plt.savefig('hist_avg_cosine_similarity.png')
plt.clf()

sns.histplot(df['avg_l2_distance'], bins=50, kde=True, color='orange')
plt.title('Distribution of Avg L2 Distance')
plt.xlabel('Avg L2 Distance')
plt.ylabel('Frequency')
plt.savefig('hist_avg_l2_distance.png')
plt.clf()

sns.histplot(df['avg_cka'], bins=50, kde=True, color='green')
plt.title('Distribution of Avg CKA')
plt.xlabel('Avg CKA')
plt.ylabel('Frequency')
plt.savefig('hist_avg_cka.png')
plt.clf()

sns.histplot(df['cohen_d_neuronwise'], bins=50, kde=True, color='purple')
plt.title('Distribution of Cohen\'s d (Neuron-wise)')
plt.xlabel('Cohen\'s d')
plt.ylabel('Frequency')
plt.savefig('hist_cohen_d.png')
plt.clf()

sns.scatterplot(x='avg_cosine_similarity', y='avg_cka', data=df)
plt.title('Cosine Similarity vs CKA')
plt.xlabel('Avg Cosine Similarity')
plt.ylabel('Avg CKA')
plt.savefig('scatter_cosine_vs_cka.png')
plt.clf()

sns.scatterplot(x='avg_cosine_similarity', y='avg_l2_distance', data=df)
plt.title('Cosine Similarity vs L2 Distance')
plt.xlabel('Avg Cosine Similarity')
plt.ylabel('Avg L2 Distance')
plt.savefig('scatter_cosine_vs_l2.png')
plt.clf()

sns.scatterplot(x='avg_cosine_similarity', y='cohen_d_neuronwise', data=df)
plt.title('Cosine Similarity vs Neuron-wise Cohen\'s d')
plt.xlabel('Avg Cosine Similarity')
plt.ylabel('Cohen\'s d')
plt.savefig('scatter_cosine_vs_cohen_d.png')
plt.clf()

sns.boxplot(x=pd.qcut(df['avg_cosine_similarity'], q=4), y='avg_cka', data=df)
plt.title('CKA by Cosine Similarity Quartiles')
plt.xlabel('Cosine Similarity Quartile')
plt.ylabel('Avg CKA')
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('box_cka_by_cosine_quartile.png')
plt.clf()

corr_matrix = df[['avg_cosine_similarity', 'avg_l2_distance', 'avg_cka', 'cohen_d_neuronwise']].corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', center=0)
plt.title('Correlation Matrix')
plt.savefig('correlation_matrix.png')
plt.clf()

df.describe()[['avg_cosine_similarity', 'avg_l2_distance', 'avg_cka', 'cohen_d_neuronwise']].to_csv('summary_stats.csv')

from IPython.display import Image, display

display(Image('hist_avg_cosine_similarity.png'))
display(Image('hist_avg_l2_distance.png'))
display(Image('hist_avg_cka.png'))
display(Image('hist_cohen_d.png'))
display(Image('scatter_cosine_vs_cka.png'))
display(Image('scatter_cosine_vs_l2.png'))
display(Image('scatter_cosine_vs_cohen_d.png'))
display(Image('box_cka_by_cosine_quartile.png'))
display(Image('correlation_matrix.png'))
